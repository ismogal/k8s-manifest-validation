{
  "description": "KnativeKafka is the Schema for the knativekafkas API",
  "type": "object",
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": [
        "string",
        "null"
      ],
      "enum": [
        "operator.serverless.openshift.io/v1alpha1"
      ]
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": [
        "string",
        "null"
      ],
      "enum": [
        "KnativeKafka"
      ]
    },
    "metadata": {
      "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
      "$ref": "_definitions.json#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta_v2"
    },
    "spec": {
      "description": "KnativeKafkaSpec defines the desired state of the KnativeKafka (from the client).",
      "type": [
        "object",
        "null"
      ],
      "required": [
        "channel",
        "source"
      ],
      "properties": {
        "channel": {
          "description": "Allows configuration for KafkaChannel installation",
          "type": "object",
          "required": [
            "enabled"
          ],
          "properties": {
            "authSecretName": {
              "description": "AuthSecretName is the name of the secret that contains Kafka auth configuration.",
              "type": [
                "string",
                "null"
              ]
            },
            "authSecretNamespace": {
              "description": "AuthSecretNamespace is the namespace of the secret that contains Kafka auth configuration.",
              "type": [
                "string",
                "null"
              ]
            },
            "bootstrapServers": {
              "description": "BootstrapServers is comma separated string of bootstrapservers that the KafkaChannels will use",
              "type": [
                "string",
                "null"
              ]
            },
            "enabled": {
              "description": "Enabled defines if the KafkaChannel installation is enabled",
              "type": "boolean"
            }
          }
        },
        "high-availability": {
          "description": "Allows specification of HA control plane",
          "type": [
            "object",
            "null"
          ],
          "properties": {
            "replicas": {
              "description": "The number of replicas that HA parts of the control plane will be scaled to",
              "type": [
                "integer",
                "null"
              ],
              "minimum": 1
            }
          }
        },
        "source": {
          "description": "Allows configuration for KafkaSource installation",
          "type": "object",
          "required": [
            "enabled"
          ],
          "properties": {
            "enabled": {
              "description": "Enabled defines if the KafkaSource installation is enabled",
              "type": "boolean"
            }
          }
        }
      }
    },
    "status": {
      "description": "KnativeKafkaStatus defines the observed state of KnativeKafka (from the controller).",
      "type": [
        "object",
        "null"
      ],
      "properties": {
        "annotations": {
          "description": "Annotations is additional Status fields for the Resource to save some additional State as well as convey more information to the user. This is roughly akin to Annotations on any k8s resource, just the reconciler conveying richer information outwards.",
          "type": [
            "object",
            "null"
          ],
          "additionalProperties": {
            "type": [
              "string",
              "null"
            ]
          }
        },
        "conditions": {
          "description": "Conditions the latest available observations of a resource's current state. +patchMergeKey=type +patchStrategy=merge",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "type": [
              "object",
              "null"
            ],
            "required": [
              "type",
              "status"
            ],
            "properties": {
              "lastTransitionTime": {
                "description": "LastTransitionTime is the last time the condition transitioned from one status to another. We use VolatileTime in place of metav1.Time to exclude this from creating equality.Semantic differences (all other things held constant).",
                "type": [
                  "string",
                  "null"
                ]
              },
              "message": {
                "description": "A human readable message indicating details about the transition.",
                "type": [
                  "string",
                  "null"
                ]
              },
              "reason": {
                "description": "The reason for the condition's last transition.",
                "type": [
                  "string",
                  "null"
                ]
              },
              "severity": {
                "description": "Severity with which to treat failures of this type of condition. When this is not specified, it defaults to Error.",
                "type": [
                  "string",
                  "null"
                ]
              },
              "status": {
                "description": "Status of the condition, one of True, False, Unknown. +required",
                "type": "string"
              },
              "type": {
                "description": "Type of condition. +required",
                "type": "string"
              }
            }
          }
        },
        "observedGeneration": {
          "description": "ObservedGeneration is the 'Generation' of the Service that was last processed by the controller.",
          "type": [
            "integer",
            "null"
          ],
          "format": "int64"
        },
        "version": {
          "description": "The version of the installed release",
          "type": [
            "string",
            "null"
          ]
        }
      }
    }
  },
  "x-kubernetes-group-version-kind": [
    {
      "group": "operator.serverless.openshift.io",
      "kind": "KnativeKafka",
      "version": "v1alpha1"
    }
  ],
  "$schema": "http://json-schema.org/schema#"
}